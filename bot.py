import telebot
import requests
from bs4 import BeautifulSoup
import time
import threading

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
token = "8083884181:AAE5QThb0_pPUIhhw5qtQjnqsjZ8rl28n4g"
bot = telebot.TeleBot(token)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
def parse_anime():
    URL = "https://amedia.lol/"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 YaBrowser/25.2.0.0 Safari/537.36'
    }

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page = requests.get(URL, headers=headers)
        page.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å –∫–æ–¥ 200)

        # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        soup = BeautifulSoup(page.content, "html.parser")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ
        anime_list = soup.find_all("a", class_="ftop-item")
        result = []

        for anime in anime_list:
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ
            title = anime.find("div", class_="ftop-item__title").text.strip()

            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–Ω–∏–º–µ
            link = URL + anime["href"].lstrip("/")

            # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            date = anime.find("div", class_="ftop-item__meta").text.strip()

            # –ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏
            episode = anime.find("div", class_="animseri").text.strip().replace("—Å–µ—Ä–∏—è", "").strip()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            anime_info = (
                f"üé¨ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href='{link}'>–ö–õ–ò–ö</a>\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
                f"üì∫ <b>–°–µ—Ä–∏—è:</b> {episode} —Å–µ—Ä–∏—è\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
            result.append((anime_info, date))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞—Ç—É

        return result

    except requests.exceptions.RequestException as e:
        return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}"]
    except Exception as e:
        return [f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
def check_for_updates(chat_id):
    last_updates = []
    first_run = True  # –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

    while user_states.get(chat_id, False):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_updates = parse_anime()
        if new_updates != last_updates:
            if first_run:
                # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å —Ç–∞–π—Ç–ª—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—èüî•")
                first_run = False
            else:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
                new_posts = [post for post, date in new_updates if post not in last_updates and "–ù–æ–≤–∞—è —Å–µ—Ä–∏—è –≤" not in date]
                if new_posts:
                    # –ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                    bot.send_message(chat_id, new_posts[0], parse_mode="HTML")
            last_updates = new_updates
        time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def handle_start(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
    btn_ongoing = telebot.types.KeyboardButton("–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
    btn_stop = telebot.types.KeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
    btn_anime = telebot.types.KeyboardButton("–ê–Ω–∏–º–µ")
    btn_today = telebot.types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è –≤—ã–π–¥–µ—Ç")
    markup.add(btn_ongoing, btn_stop, btn_anime, btn_today)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ongoing
@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
def handle_ongoing(message):
    chat_id = message.chat.id
    if not user_states.get(chat_id, False):
        user_states[chat_id] = True
        bot.send_message(chat_id, "–ó–∞–ø—É—Å–∫–∞—é —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏...")
        threading.Thread(target=check_for_updates, args=(chat_id,)).start()
    else:
        bot.send_message(chat_id, "–°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
@bot.message_handler(func=lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
def handle_stop(message):
    chat_id = message.chat.id
    if user_states.get(chat_id, False):
        user_states[chat_id] = False
        bot.send_message(chat_id, "–°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        bot.send_message(chat_id, "–°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /anime
@bot.message_handler(func=lambda message: message.text == "–ê–Ω–∏–º–µ")
def handle_anime(message):
    bot.send_message(message.chat.id, "–°–µ–∫—É–Ω–¥—É, —Å–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...")
    anime_data = parse_anime()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞

    if anime_data:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—à–µ–¥—à–∏–µ —Ç–∞–π—Ç–ª—ã
        posts = [post for post, date in anime_data if "–ù–æ–≤–∞—è —Å–µ—Ä–∏—è –≤" not in date]
        output_message = "\n\n".join(posts)
        bot.send_message(message.chat.id, output_message, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°–µ–≥–æ–¥–Ω—è –≤—ã–π–¥–µ—Ç"
@bot.message_handler(func=lambda message: message.text == "–°–µ–≥–æ–¥–Ω—è –≤—ã–π–¥–µ—Ç")
def handle_today(message):
    bot.send_message(message.chat.id, "–°–µ–∫—É–Ω–¥—É, —Å–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...")
    anime_data = parse_anime()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞

    if anime_data:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–π—Ç–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–π–¥—É—Ç —Å–µ–≥–æ–¥–Ω—è
        posts = [post for post, date in anime_data if "–ù–æ–≤–∞—è —Å–µ—Ä–∏—è –≤" in date]
        output_message = "\n\n".join(posts)
        bot.send_message(message.chat.id, output_message, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)